{"version":3,"sources":["iterable-differ-helper.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;GAWG;;AAEH,sCAIuB;AAOvB;IAKI,8BAAoB,QAAyB;QAAzB,aAAQ,GAAR,QAAQ,CAAiB;QAFrC,qBAAgB,GAA2B,EAAE,CAAC;IAEL,CAAC;IAElD,sCAAO,GAAP,UAAQ,IAAiB;QACrB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IAED,oCAAK,GAAL,UAAM,IAAY,EAAE,OAAsB;QACtC,EAAE,CAAC,CAAC,IAAI,IAAI,OAAO,CAAC,CAAC,CAAC;YAClB,IAAM,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,YAAY,CAAC;YACzC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAClC,CAAC;IACL,CAAC;IAED,0CAAW,GAAX,UAAY,IAAY,EAAE,KAAU;QAChC,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAChC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC/B,IAAI,CAAC;oBACD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;oBACrE,MAAM,CAAC,IAAI,CAAC;gBAChB,CAAC;gBAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACnB,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC;QAED,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAED,yCAAU,GAAV,UAAW,IAAY,EAAE,KAAU;QAC/B,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnD,CAAC;IACL,CAAC;IAED,kDAAmB,GAAnB,UAAoB,QAAgB,EAAE,SAAc;QAChD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,SAAS,CAAC;IAC7D,CAAC;IAAA,CAAC;IAEF,sCAAO,GAAP,UAAQ,IAAY;QAChB,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAC9B,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAC5B,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAEhE,IAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YACjD,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;gBACrD,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC;gBAC9B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAChD,CAAC;QACL,CAAC;IACL,CAAC;IAEE,+BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,iBAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,mCAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,sBAAe,GAAG;KACxB,EAF6F,CAE7F,CAAC;IACF,2BAAC;CA/DD,AA+DC,IAAA;AA/DY,oDAAoB","file":"iterable-differ-helper.js","sourceRoot":"","sourcesContent":["/*!\n * devextreme-angular\n * Version: 17.2.7\n * Build date: Wed Mar 21 2018\n *\n * Copyright (c) 2012 - 2018 Developer Express Inc. ALL RIGHTS RESERVED\n *\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file in the root of the project for details.\n *\n * https://github.com/DevExpress/devextreme-angular\n */\n\nimport {\r\n    Injectable,\r\n    SimpleChanges,\r\n    IterableDiffers\r\n} from '@angular/core';\r\n\r\nimport {\r\n    DxComponent\r\n} from './component';\r\n\r\n\r\nexport class IterableDifferHelper {\r\n\r\n    private _host: DxComponent;\r\n    private _propertyDiffers: { [id: string]: any; } = {};\r\n\r\n    constructor(private _differs: IterableDiffers) { }\r\n\r\n    setHost(host: DxComponent) {\r\n        this._host = host;\r\n    }\r\n\r\n    setup(prop: string, changes: SimpleChanges) {\r\n        if (prop in changes) {\r\n            const value = changes[prop].currentValue;\r\n            this.setupSingle(prop, value);\r\n        }\r\n    }\r\n\r\n    setupSingle(prop: string, value: any) {\r\n        if (value && Array.isArray(value)) {\r\n            if (!this._propertyDiffers[prop]) {\r\n                try {\r\n                    this._propertyDiffers[prop] = this._differs.find(value).create(null);\r\n                    return true;\r\n                } catch (e) { }\r\n            }\r\n        } else {\r\n            delete this._propertyDiffers[prop];\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getChanges(prop: string, value: any) {\r\n        if (this._propertyDiffers[prop]) {\r\n            return this._propertyDiffers[prop].diff(value);\r\n        }\r\n    }\r\n\r\n    checkChangedOptions(propName: string, hostValue: any) {\r\n        return this._host.changedOptions[propName] === hostValue;\r\n    };\r\n\r\n    doCheck(prop: string) {\r\n        if (this._propertyDiffers[prop]) {\r\n            let hostValue = this._host[prop],\r\n                isChangedOption = this.checkChangedOptions(prop, hostValue);\r\n\r\n            const changes = this.getChanges(prop, hostValue);\r\n            if (changes && this._host.instance && !isChangedOption) {\r\n                this._host.lockWidgetUpdate();\r\n                this._host.instance.option(prop, hostValue);\r\n            }\r\n        }\r\n    }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: IterableDiffers, },\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}