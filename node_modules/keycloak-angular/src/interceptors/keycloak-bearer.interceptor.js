"use strict";
/**
 * @license
 * Copyright Mauricio Gemelli Vigolo and contributors.
 *
 * Use of this source code is governed by a MIT-style license that can be
 * found in the LICENSE file at https://github.com/mauriciovigolo/keycloak-angular/LICENSE
 */
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var mergeMap_1 = require("rxjs/operators/mergeMap");
var keycloak_service_1 = require("../services/keycloak.service");
/**
 * This interceptor includes the bearer by default in all HttpClient requests.
 *
 * If you need to exclude some URLs from adding the bearer, please, take a look
 * at the {@link KeycloakOptions} bearerExcludedUrls property.
 */
var KeycloakBearerInterceptor = (function () {
    /**
     * KeycloakBearerInterceptor constructor.
     *
     * @param keycloak - Injected KeycloakService instance.
     */
    function KeycloakBearerInterceptor(keycloak) {
        this.keycloak = keycloak;
    }
    KeycloakBearerInterceptor.prototype.loadExcludedUrlsRegex = function () {
        var excludedUrls = this.keycloak.bearerExcludedUrls;
        this.excludedUrlsRegex = excludedUrls.map(function (urlPattern) { return new RegExp(urlPattern, 'i'); }) || [];
    };
    /**
     * Intercept implementation that checks if the request url matches the excludedUrls.
     * If not, adds the Authorization header to the request.
     *
     * @param req
     * @param next
     */
    KeycloakBearerInterceptor.prototype.intercept = function (req, next) {
        // If keycloak service is not initialized yet, or the interceptor should not be execute
        if (!this.keycloak || !this.keycloak.enableBearerInterceptor) {
            return next.handle(req);
        }
        if (!this.excludedUrlsRegex) {
            this.loadExcludedUrlsRegex();
        }
        var urlRequest = req.url;
        var shallPass = !!this.excludedUrlsRegex.find(function (regex) { return regex.test(urlRequest); });
        if (shallPass) {
            return next.handle(req);
        }
        return this.keycloak.addTokenToHeader(req.headers).pipe(mergeMap_1.mergeMap(function (headersWithBearer) {
            var kcReq = req.clone({ headers: headersWithBearer });
            return next.handle(kcReq);
        }));
    };
    return KeycloakBearerInterceptor;
}());
KeycloakBearerInterceptor.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
KeycloakBearerInterceptor.ctorParameters = function () { return [
    { type: keycloak_service_1.KeycloakService, },
]; };
exports.KeycloakBearerInterceptor = KeycloakBearerInterceptor;
//# sourceMappingURL=keycloak-bearer.interceptor.js.map